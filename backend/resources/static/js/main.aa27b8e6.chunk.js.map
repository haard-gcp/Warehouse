{"version":3,"sources":["AppNavbar.js","ArticlesList.js","ProductsList.js","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","props","state","isOpen","toggle","bind","this","setState","color","dark","expand","tag","Link","to","onClick","navbar","className","Component","Articles","articles","isLoading","fetch","then","response","json","data","inventory","articleList","map","article","key","art_id","name","stock","fluid","width","Products","product","productdata","num","productsarray","products","item","id","method","headers","window","location","reload","contains","contain_articles","containitem","articleitem","amount_of","console","log","productList","productitem","style","whiteSpace","number","size","remove","App","Switch","Route","path","exact","component","Boolean","hostname","match","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.aa27b8e6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Collapse, Nav, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';     // import component\r\nimport { Link } from 'react-router-dom';\r\n\r\n// Menu Page\r\n\r\nexport default class AppNavbar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {isOpen: false};       // define variable\r\n    this.toggle = this.toggle.bind(this);\r\n  }\r\n\r\n  toggle() {       // define function\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  }\r\n\r\n  // <!-----Frontend start\r\n  render() {\r\n    return <Navbar color=\"dark\" dark expand=\"md\">\r\n      <NavbarBrand tag={Link} to=\"/\">The Warehouse</NavbarBrand>\r\n      <NavbarToggler onClick={this.toggle}/>\r\n      <Collapse isOpen={this.state.isOpen} navbar>\r\n        <Nav className=\"ml-auto\" navbar>\r\n          <NavItem>\r\n            <NavLink\r\n              tag={Link} to=\"/\">Product's List</NavLink>\r\n          </NavItem>\r\n          <NavItem>\r\n            <NavLink tag={Link} to=\"/articles\">Article's List</NavLink>\r\n          </NavItem>\r\n        </Nav>\r\n      </Collapse>\r\n    </Navbar>;\r\n  }\r\n  // Frontend end -----!>\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport AppNavbar from './AppNavbar';\r\nimport {Container, Table } from 'reactstrap';     // import component\r\n\r\n// Article's List Page\r\n\r\nclass Articles extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {articles: [], isLoading: true};       // define variable\r\n  }\r\n\r\n  // <!----- Section when page loading\r\n  componentDidMount() {\r\n    this.setState({isLoading: true});\r\n    \r\n    fetch('api/articles')       // send get articles request(api)\r\n      .then(response => response.json())\r\n      .then(data =>{\r\n        this.setState({isLoading: false, articles: data.inventory});        // push response data to array\r\n      });\r\n  }\r\n  // -----!>\r\n\r\n  // <!-----Frontend start\r\n  render() {\r\n    const {articles, isLoading} = this.state;\r\n\r\n    if (isLoading) {      // loading data\r\n      return <p>Loading...</p>;\r\n    }\r\n\r\n    const articleList = articles.map(article => {      // making table body\r\n      return <tr key={article.art_id}>\r\n        <td>{article.name}</td>\r\n        <td>{article.stock}</td>\r\n        <td></td>\r\n      </tr>\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <AppNavbar/>\r\n        <Container fluid>\r\n          <h3>Articles List</h3>\r\n          <Table className=\"mt-4\">\r\n            <thead>\r\n              <tr>\r\n                <th width=\"20%\">Name</th>\r\n                <th width=\"20%\">Stock</th>\r\n                <th width=\"60%\"></th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n            {articleList}\r\n            </tbody>\r\n          </Table>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n  // Frontend end -----!>\r\n\r\n}\r\n\r\nexport default Articles;","import React, { Component } from 'react';\r\nimport { Button, ButtonGroup, Container, Table } from 'reactstrap';     // import component\r\nimport AppNavbar from './AppNavbar';\r\n\r\n// Product's List Page\r\n\r\nclass Products extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {product: [], productdata: [], articles: [], isLoading: true};       // define variable\r\n  }\r\n\r\n  // <!----- Section when page loading\r\n  componentDidMount() {\r\n    this.setState({ isLoading: true});\r\n    let num = 0;\r\n\r\n    fetch('api/articles')       // send get articles request(api)\r\n      .then(response => response.json())\r\n      .then(data =>{\r\n        this.setState({articles: data.inventory});        // push response data to array\r\n      });\r\n\r\n    fetch('api/getproducts')       // send get products request(api)\r\n      .then(response => response.json())\r\n      .then(data =>{\r\n        const productsarray = data.products;\r\n        productsarray.map((item) =>{\r\n          num = num+1;\r\n          item.id = num;\r\n        })\r\n        this.setState({ isLoading: false, product: productsarray, productdata: data.products})        // push response data to array\r\n      });\r\n  }\r\n  // -----!>\r\n\r\n  // <!----- Remove function\r\n  remove(name) {\r\n    fetch(`/api/updateproducts/${name}`, {       // send delete products request(api)\r\n      method: 'delete',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      }\r\n      }).then(() => {\r\n        window.location.reload();\r\n    });\r\n  }\r\n  // -----!>\r\n\r\n  // <!-----Frontend start\r\n  render() {\r\n    const {product, isLoading} = this.state;\r\n\r\n    if (isLoading) {      // loading data\r\n      return <p>Loading...</p>;\r\n    }\r\n\r\n    product.map((item)=>{     // making useful array\r\n      let contains = \"\";\r\n      item.contain_articles.map((containitem)=>{\r\n        this.state.articles.map((articleitem)=>{\r\n          if(containitem.art_id == articleitem.art_id)\r\n          {\r\n            containitem.name = articleitem.name;\r\n          }\r\n        })\r\n        contains = contains + containitem.name + \" : \" + containitem.amount_of + \", \";\r\n      })\r\n      item.contains = contains;   // changing containg articles user friendly\r\n    })\r\n    console.log(\"product\",product)\r\n    const productList = product.map((productitem) => {      // table body\r\n\r\n      return <tr key={productitem.id}>\r\n        <td style={{whiteSpace: 'nowrap'}}>{productitem.name}</td>\r\n        <td style={{whiteSpace: 'nowrap'}}>{productitem.number}</td>\r\n        <td style={{whiteSpace: 'nowrap'}}>{productitem.contains}</td>\r\n        <td>\r\n          <ButtonGroup>\r\n            <Button size=\"sm\" color=\"danger\" onClick={() => this.remove(productitem.name)}>Delete</Button>\r\n          </ButtonGroup>\r\n        </td>\r\n        <td></td>\r\n      </tr>\r\n\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <AppNavbar/>\r\n        <Container fluid>\r\n          <h3>Products List</h3>\r\n          <Table className=\"mt-4\">\r\n            <thead>\r\n              <tr>\r\n                <th width=\"20%\">Name</th>\r\n                <th width=\"10%\">number</th>\r\n                <th width=\"20%\">Contain Articles</th>\r\n                <th width=\"10%\">Actions</th>\r\n                <th width=\"40%\"></th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n            {productList}\r\n            </tbody>\r\n          </Table>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n  // Frontend end -----!>\r\n\r\n}\r\n\r\nexport default Products;","import React, { Component } from 'react';\nimport './App.css';\nimport Articles from './ArticlesList';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Products from './ProductsList';\n\n//Router define\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route path='/' exact={true} component={Products}/>\n          <Route path='/articles' exact={true} component={Articles}/>\n        </Switch>\n      </Router>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}